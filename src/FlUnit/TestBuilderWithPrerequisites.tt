<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="_Common.t4" #>
using System;
using System.Collections.Generic;

namespace FlUnit
{
<# 

string NextPrereqBuilderArgs(int i, bool isEachOf)
{
    var nextPrereq = isEachOf ? $"prereqs{i + 1}" : $"() => new[] {{ prereq{i + 1}() }}";

    if (i == 0)
    {
        return nextPrereq;
    }
    else if (i == 1)
    {
        return $"(arrange, {nextPrereq})";
    }
    else
    {
        return $"({ List(i, i => $"arrange.Item{i}") }, {nextPrereq})";
    }
}

for(int i = 0; i <= MaxPrerequisiteCount; i++) { #>
<# WriteLineIf(i > 0); #>
	/// <summary>
    /// Builder for providing pre-requisites for a test.
    /// </summary>
<# WriteTypeParamDocs(i, i => $"The type of the { Ordinal(i) } pre-requisite already defined.", 1); #>
	public sealed class TestBuilderWithPrerequisites<#= TList(i, "<", ">") #>
	{
<# WriteLineIf(i > 0, $"private readonly {ArrangeFieldType(i)} arrange;", 2); #>
<# WriteLineIf(i > 0); #>
		internal TestBuilderWithPrerequisites(<# WriteIf(i > 0, $"{ArrangeFieldType(i)} arrange"); #>)
        {
<# WriteLineIf(i > 0, "this.arrange = arrange;", 3); #>
        }
<# if (i == 0) { #>

        /// <summary>
        /// Adds the first "Given" clause for the test.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the pre-requisite.</typeparam>
        /// <param name="prereq<#= i + 1 #>">The pre-requisite.</param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestBuilderWithPrerequisites<<#= TList(i + 1) #>> Given<T<#= i + 1 #>>(Func<T<#= i + 1 #>> prereq<#= i + 1 #>)
        {
            return new TestBuilderWithPrerequisites<<#= TList(i + 1) #>>(<#= NextPrereqBuilderArgs(i, false) #>);
        }

        /// <summary>
        /// Adds the first "Given" clause for the test.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the pre-requisite.</typeparam>
        /// <param name="prereqs<#= i + 1 #>">The pre-requisites, one for each test case.</param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestBuilderWithPrerequisites<<#= TList(i + 1) #>> GivenEachOf<T<#= i + 1 #>>(Func<IEnumerable<T<#= i + 1 #>>> prereqs<#= i + 1 #>)
        {
            return new TestBuilderWithPrerequisites<<#= TList(i + 1) #>>(<#= NextPrereqBuilderArgs(i, true) #>);
        }
<# } else if (i < MaxPrerequisiteCount) { #>

        /// <summary>
        /// Adds another "Given" clause for the test.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the pre-requisite.</typeparam>
        /// <param name="prereq<#= i + 1 #>">The pre-requisite.</param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestBuilderWithPrerequisites<<#= TList(i + 1) #>> And<T<#= i + 1 #>>(Func<T<#= i + 1 #>> prereq<#= i + 1 #>)
        {
            return new TestBuilderWithPrerequisites<<#= TList(i + 1) #>>(<#= NextPrereqBuilderArgs(i, false) #>);
        }

        /// <summary>
        /// Adds another "Given" clause for the test.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the pre-requisite.</typeparam>
        /// <param name="prereqs<#= i + 1 #>">The pre-requisites, one for each test case.</param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestBuilderWithPrerequisites<<#= TList(i + 1) #>> AndEachOf<T<#= i + 1 #>>(Func<IEnumerable<T<#= i + 1 #>>> prereqs<#= i + 1 #>)
        {
            return new TestBuilderWithPrerequisites<<#= TList(i + 1) #>>(<#= NextPrereqBuilderArgs(i, true) #>);
        }
<# } #>

        /// <summary>
        /// Adds a "When" clause that does not return a value.
        /// </summary>
        /// <param name="testAction">The function that is the "When" clause of the test.</param>
        /// <returns>A builder for providing "Then" clauses.</returns>
        public TestBuilderWithAction<#= TList(i, "<", ">") #> When(Action<#= TList(i, "<", ">") #> testAction)
        {
            return new TestBuilderWithAction<#= TList(i, "<", ">") #>(<# WriteIf(i > 0, "arrange, "); #>testAction);
        }

        /// <summary>
        /// Adds a "When" clause that returns a value.
        /// </summary>
        /// <param name="testFunction">The function that is the "When" clause of the test.</param>
        /// <returns>A builder for providing "Then" clauses.</returns>
        public TestBuilderWithFunction<<#= TList(i, "", ", ") #>TResult> When<TResult>(Func<<#= TList(i, "", ", ") #>TResult> testFunction)
        {
            return new TestBuilderWithFunction<<#= TList(i, "", ", ") #>TResult>(<# WriteIf(i > 0, "arrange, "); #>testFunction);
        }
	}
<# } #>}