<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="_Common.t4" #>
using System;
using System.Collections.Generic;

namespace FlUnit
{
<# for(int i = 1; i <= MaxPrerequisiteCount; i++) { #>
<# WriteLineIf(i > 0); #>
	/// <summary>
    /// Builder for providing additional pre-requisites for a test.
    /// </summary>
    <#= TypeParamDocs(i, i => $"The type of the { Ordinal(i) } pre-requisite already defined.") #>
	public sealed class TestBuilderWithPrerequisites<<#= TList(i) #>>
	{
		private readonly <#= ArrangeFieldType(i) #> arrange;

		internal TestBuilderWithPrerequisites(<#= ArrangeFieldType(i) #> prereqs) => this.arrange = prereqs;

<# if (i < MaxPrerequisiteCount) { #>
        /// <summary>
        /// Adds another "Given" clause for the test.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the pre-requisite.</typeparam>
        /// <param name="prereq<#= i + 1 #>">The pre-requisite.</param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestBuilderWithPrerequisites<<#= TList(i + 1) #>> And<T<#= i + 1 #>>(Func<T<#= i + 1 #>> prereq<#= i + 1 #>)
        {
            return new TestBuilderWithPrerequisites<<#= TList(i + 1) #>>((<#= i == 1 ? "arrange" : List(i, i => $"arrange.Item{i}") #>, () => new[] { prereq<#= i + 1 #>() }));
        }

        /// <summary>
        /// Adds another "Given" clause for the test.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the pre-requisite.</typeparam>
        /// <param name="prereqs<#= i + 1 #>">The pre-requisites, one for each test case.</param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestBuilderWithPrerequisites<<#= TList(i + 1) #>> AndEachOf<T<#= i + 1 #>>(Func<IEnumerable<T<#= i + 1 #>>> prereqs<#= i + 1 #>)
        {
            return new TestBuilderWithPrerequisites<<#= TList(i + 1) #>>((<#= i == 1 ? "arrange" : List(i, i => $"arrange.Item{i}") #>, prereqs<#= i + 1 #>));
        }
<# } #>

        /// <summary>
        /// Adds a "When" clause that does not return a value.
        /// </summary>
        /// <param name="testAction">The function that is the "When" clause of the test.</param>
        /// <returns>A builder for providing "Then" clauses.</returns>
        public TestBuilderWithAction<<#= TList(i) #>> When(Action<<#= TList(i) #>> testAction)
        {
            return new TestBuilderWithAction<<#= TList(i) #>>(arrange, testAction);
        }

        /// <summary>
        /// Adds a "When" clause that returns a value.
        /// </summary>
        /// <param name="testFunction">The function that is the "When" clause of the test.</param>
        /// <returns>A builder for providing "Then" clauses.</returns>
        public TestBuilderWithFunction<<#= TList(i) #>, TResult> When<TResult>(Func<<#= TList(i) #>, TResult> testFunction)
        {
            return new TestBuilderWithFunction<<#= TList(i) #>, TResult>(arrange, testFunction);
        }
	}
<# } #>}