<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="_Common.t4" #>
using System;
using System.Threading.Tasks;

namespace FlUnit
{
    internal static class FunctionExtensions
    {
<# for(int i = 0; i <= MaxPrerequisiteCount + 1; i++) { #>
<# WriteLineIf(i > 0); #>
#if NET6_0
        public static Func<<#= TList(i, "", ", ")#>ValueTask<TOut>> ToAsyncWrapper<<#= TList(i, "", ", ")#>TOut>(this Func<<#= TList(i, "", ", ")#>TOut> func)
        {
            return (<#= List(i, i => $"a{i}") #>) => ValueTask.FromResult(func.Invoke(<#= List(i, i => $"a{i}") #>));
        }

        public static Func<<#= TList(i, "", ", ") #>ValueTask<TOut>> ToAsyncWrapper<<#= TList(i, "", ", ") #>TOut>(this Func<<#= TList(i, "", ", ")#>Task<TOut>> func)
        {
            return (<#= List(i, i => $"a{i}") #>) => new ValueTask<TOut>(func.Invoke(<#= List(i, i => $"a{i}") #>));
        }

        public static Func<<#= TList(i, "", ", ") #>ValueTask> ToAsyncWrapper<#= TList(i, "<", ">") #>(this Func<<#= TList(i, "", ", ")#>Task> func)
        {
            return (<#= List(i, i => $"a{i}") #>) => new ValueTask(func.Invoke(<#= List(i, i => $"a{i}") #>));
        }
#else
        public static Func<<#= TList(i, "", ", ")#>Task<TOut>> ToAsyncWrapper<<#= TList(i, "", ", ")#>TOut>(this Func<<#= TList(i, "", ", ")#>TOut> func)
        {
            return (<#= List(i, i => $"a{i}") #>) => Task.FromResult(func.Invoke(<#= List(i, i => $"a{i}") #>));
        }

        public static Func<<#= TList(i, "", ", ") #>Task<TOut>> ToAsyncWrapper<<#= TList(i, "", ", ") #>TOut>(this Func<<#= TList(i, "", ", ")#>Task<TOut>> func)
        {
            return func;
        }

        public static Func<<#= TList(i, "", ", ") #>Task> ToAsyncWrapper<#= TList(i, "<", ">") #>(this Func<<#= TList(i, "", ", ")#>Task> func)
        {
            return func;
        }
#endif
<# } #>
   }
}