<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="_Common.t4" #>
using System;
using System.Collections.Generic;
using System.Linq;
#if NET6_0
using System.Runtime.CompilerServices;
#else
using System.Linq.Expressions;
#endif
using System.Runtime.ExceptionServices;

namespace FlUnit
{
<# for(int i = 0; i <= MaxPrerequisiteCount; i++) { #>
<# WriteLineIf(i > 0); #>
    /// <summary>
    /// Builder for providing the additional assertions for a test with <#= i #> "Given" clause<#= Plural(i) #>
    /// and for which the "When" clause returns a value - and is expected to return successfully.
    /// </summary>
<# WriteTypeParamDocs(i, i => $"The type of the { Ordinal(i) } \"Given\" clause of the test."); #>
    /// <typeparam name="TResult">The return type of the "When" clause of the test.</typeparam>
    public sealed class TestBuilderWithFunctionAndRVAssertions<<#= TList(i, "", ", ") #>TResult>
    {
<# WriteLineIf(i > 0, $"private readonly {ArrangeFieldType(i)} arrange;", 2); #>
        private readonly Func<<#= TList(i, "", ", ") #>TResult> testFunction;
        private readonly List<Assertion> assertions = new List<Assertion>();

        internal TestBuilderWithFunctionAndRVAssertions(
<# WriteLineIf(i > 0, $"{ArrangeFieldType(i)} arrange,", 3); #>
            Func<<#= TList(i, "", ", ") #>TResult> testFunction,
            Assertion assertion)
        {
<# WriteLineIf(i > 0, "this.arrange = arrange;", 3); #>
            this.testFunction = testFunction;
            assertions.Add(assertion);
        }

        /// <summary>
        /// Implicitly converts a <see cref="TestBuilderWithFunctionAndRVAssertions{<#= TList(i, "", ", ") #>TResult}"/> to a <see cref="Test"/> (by building it).
        /// </summary>
        /// <param name="builder">The builder to convert.</param>
        public static implicit operator Test(TestBuilderWithFunctionAndRVAssertions<<#= TList(i, "", ", ") #>TResult> builder)
        {
            return new TestFunction<<#= TList(i, "", ", ") #>TResult>(
<# WriteLineIf(i > 0, "builder.arrange,", 4); #>
                builder.testFunction,
                tc => builder.assertions.Select(a => new TestFunction<<#= TList(i, "", ", ") #>TResult>.Case.Assertion(tc, a.Action, a.Description)));
        }

#if NET6_0
        /// <summary>
        /// Adds an additional assertion for the test.
        /// </summary>
        /// <param name="assertion">The assertion.</param>
        /// <param name="description">The description of the assertion. Optional.</param>
        /// <param name="assertionExpression">
        /// Automatically populated by the compiler - takes the value of the argument expression passed to the assertion parameter.
        /// Used as the description of the assertion if no description is provided - after a little processing (namely, lambda expressions are trimmed so that only their body remains).
        /// </param>
        /// <returns>A builder for providing additional assertions for the test.</returns>
        public TestBuilderWithFunctionAndRVAssertions<<#= TList(i, "", ", ") #>TResult> And(
            Action<<#= TList(i, "", ", ") #>TResult> assertion,
            string description = null,
            [CallerArgumentExpression("assertion")] string assertionExpression = null)
        {
            assertions.Add(new Assertion(assertion, description ?? AssertionExpressionHelpers.ToAssertionDescription(assertionExpression)));
            return this;
        }
#else
        /// <summary>
        /// Adds an additional assertion for the test.
        /// </summary>
        /// <param name="assertion">The assertion.</param>
        /// <returns>A builder for providing additional assertions for the test.</returns>
        public TestBuilderWithFunctionAndRVAssertions<<#= TList(i, "", ", ") #>TResult> And(Expression<Action<<#= TList(i, "", ", ") #>TResult>> assertion)
        {
            assertions.Add(new Assertion(assertion));
            return this;
        }

        /// <summary>
        /// Adds an additional assertion for the test.
        /// </summary>
        /// <param name="assertion">The assertion.</param>
        /// <param name="description">The description of the assertion.</param>
        /// <returns>A builder for providing additional assertions for the test.</returns>
        public TestBuilderWithFunctionAndRVAssertions<<#= TList(i, "", ", ") #>TResult> And(Action<<#= TList(i, "", ", ") #>TResult> assertion, string description)
        {
            assertions.Add(new Assertion(assertion, description));
            return this;
        }
#endif

        internal class Assertion
        {
            internal Assertion(Action<<#= TList(i, "", ", ") #>TResult> action, string description)
            {
                Action = (<#= i == 1 ? "a, " : List(i, i => $"a{i}", "", ", ") #>outcome) =>
                {
                    outcome.ThrowIfException();
                    action(<#= i == 1 ? "a, " : List(i, i => $"a{i}", "", ", ") #>outcome.Result);
                };
                Description = description;
            }

#if !NET6_0
            internal Assertion(Expression<Action<<#= TList(i, "", ", ") #>TResult>> expression)
            {
                Action = (<#= i == 1 ? "a, " : List(i, i => $"a{i}", "", ", ") #>outcome) =>
                {
                    outcome.ThrowIfException();
                    expression.Compile()(<#= i == 1 ? "a, " : List(i, i => $"a{i}", "", ", ") #>outcome.Result);
                };
                Description = expression.Body.ToString();
            }
#endif

            internal Assertion(string description)
            {
                Action = (<#= i == 1 ? "a, " : List(i, i => $"a{i}", "", ", ") #>outcome) =>
                {
                    outcome.ThrowIfException();
                };
                Description = description;
            }

            public Action<<#= TList(i, "", ", ") #>TestFunctionOutcome<TResult>> Action { get; }

            public string Description { get; }
        }
    }
<# } #>
}