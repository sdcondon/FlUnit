<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="_Common.t4" #>
using FlUnit.Configuration;
using System;
using System.Collections.Generic;
using System.Linq;

namespace FlUnit
{
<# for(int i = 0; i <= MaxPrerequisiteCount; i++) { #>
<# WriteLineIf(i > 0); #>
    /// <summary>
    /// Represents a test with <#= i #> "Given" clauses and a "When" clause that returns a value.
    /// </summary>
    public sealed class TestFunction<<#= TList(i, "", ", ") #>TResult> : Test
    {
        private readonly IEnumerable<Action<ITestConfiguration>> configurationOverrides;
<# WriteLineIf(i > 0, $"private readonly {ArrangeFieldType(i)} arrange;", 2); #>
        private readonly Func<<#= TList(i, "", ", ") #>TResult> act;
        private readonly Func<Case, IEnumerable<Case.Assertion>> makeAssertions;
        private IReadOnlyCollection<ITestCase> cases;

        /// <summary>
        /// Initializes a new instance of the <see cref="Test"/> class.
        /// </summary>
        /// <param name="configurationOverrides">Configuration overrides that the test should apply when run.</param>
<# WriteLineIf(i > 0, "/// <param name=\"arrange\">The callback to run the \"Given\" clauses of the test, returning the test cases.</param>", 2); #>
        /// <param name="act">The callback to run the "When" clause of the test.</param>
        /// <param name="makeAssertions">The callback to create all of the assertions for a particular test case.</param>
        internal TestFunction(
            IEnumerable<Action<ITestConfiguration>> configurationOverrides,
<# WriteLineIf(i > 0, $"{ArrangeFieldType(i)} arrange,", 3); #>
            Func<<#= TList(i, "", ", ") #>TResult> act,
            Func<Case, IEnumerable<Case.Assertion>> makeAssertions)
        {
            this.configurationOverrides = configurationOverrides;
<# WriteLineIf(i > 0, "this.arrange = arrange;", 3); #>
            this.act = act;
            this.makeAssertions = makeAssertions;
        }

        /// <summary>
        /// A collection of test cases that should be populated once <see cref="Arrange"/> is called.
        /// </summary>
        public override IReadOnlyCollection<ITestCase> Cases => cases ?? throw new InvalidOperationException("Test not yet arranged");

        /// <inheritdoc />
        public override bool HasConfigurationOverrides => configurationOverrides.Any();

        /// <inheritdoc />
        public override void ApplyConfigurationOverrides(ITestConfiguration testConfiguration)
        {
            foreach (var configurationOverride in configurationOverrides)
            {
                configurationOverride(testConfiguration);
            }
        }

        /// <summary>
        /// Arranges the test.
        /// </summary>
        public override void Arrange()
        {
<# if (i == 0) { #>
            cases = new[] { new Case(act, makeAssertions) };
<# } else if (i == 1) { #>
            cases = arrange().Select(p => new Case(p, act, makeAssertions)).ToArray();
<# } else if (i > 1) { #>
            cases = (
<# for (int j = 0; j < i; j++) { #>
                from p<#= j + 1 #> in arrange.Item<#= j + 1 #>()
<# } #>
                select new Case((<#= List(i, i => $"p{i}") #>), act, makeAssertions)).ToArray();
<# } #>
        }

        internal class Case : ITestCase
        {
            private readonly Func<<#= TList(i, "", ", ") #>TResult> act;
<# WriteLineIf(i > 0, $"private readonly {PrereqsFieldType(i)} prereqs;", 3); #>
            private TestFunctionOutcome<TResult> invocationOutcome;

            internal Case(
<# WriteLineIf(i > 0, $"{PrereqsFieldType(i)} prereqs,", 4); #>
                Func<<#= TList(i, "", ", ") #>TResult> act,
                Func<Case, IEnumerable<Assertion>> makeAssertions)
            {
<# WriteLineIf(i > 0, "this.prereqs = prereqs;", 4); #>
                this.act = act;
                this.Assertions = makeAssertions(this).ToArray();
            }

<# if (i == 0) { #>
            public string Description => string.Empty;
<# } else { #>
            public string Description => prereqs.ToString();
<# } #>

            public IReadOnlyCollection<ITestAssertion> Assertions { get; }

            public void Act()
            {
                if (invocationOutcome != null)
                {
                    throw new InvalidOperationException("Test action already invoked");
                }

                try
                {
                    invocationOutcome = new TestFunctionOutcome<TResult>(act(<#= i == 1 ? "prereqs" : List(i, i => $"prereqs.Item{i}") #>));
                }
                catch (Exception e)
                {
                    invocationOutcome = new TestFunctionOutcome<TResult>(e);
                }
            }

            internal class Assertion : ITestAssertion
            {
                private readonly Case testCase;
                private readonly Action<<#= TList(i, "", ", ") #>TestFunctionOutcome<TResult>> action;

                public Assertion(Case testCase, Action<<#= TList(i, "", ", ") #>TestFunctionOutcome<TResult>> action, string description)
                {
                    this.testCase = testCase;
                    this.action = action;
                    this.Description = description;
                }

                public string Description { get; }

                public void Invoke() => action(<#= i == 1 ? "testCase.prereqs, " : List(i, i => $"testCase.prereqs.Item{i}", "", ", ") #>testCase.invocationOutcome);
            }
        }
    }
<# } #>
}