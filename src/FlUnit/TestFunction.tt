<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="_Common.t4" #>
using System;
using System.Collections.Generic;
using System.Linq;

namespace FlUnit
{
<# for(int i = 0; i <= MaxPrerequisiteCount; i++) { #>
<# WriteLineIf(i > 0); #>
    /// <summary>
    /// Represents a test with <#= i #> "Given" clauses and a "When" clause that returns a value.
    /// </summary>
    public sealed class TestFunction<<#= TList(i, "", ", ") #>TResult> : Test
    {
<# WriteLineIf(i > 0, $"private readonly {ArrangeFieldType(i)} arrange;", 2); #>
        private readonly Func<<#= TList(i, "", ", ") #>TResult> act;
<# WriteLineIf(i > 0, $"private {PrereqsFieldType(i)} prereqs;", 2); #>
        private TestFunctionResult<TResult> invocationResult;

        /// <summary>
        /// Initializes a new instance of the <see cref="Test"/> class.
        /// </summary>
<# WriteLineIf(i > 0, "/// <param name=\"arrange\"></param>", 2); #>
        /// <param name="act"></param>
        /// <param name="assertions"></param>
        internal TestFunction(
<# WriteLineIf(i > 0, $"{ArrangeFieldType(i)} arrange,", 3); #>
            Func<<#= TList(i, "", ", ") #>TResult> act,
            IEnumerable<TestBuilderWithFunctionAndAssertions<<#= TList(i, "", ", ") #>TResult>.Assertion> assertions)
        {
<# WriteLineIf(i > 0, "this.arrange = arrange;", 3); #>
            this.act = act;
            this.Assertions = assertions.Select(a => new Assertion(this, a.Action, a.Description));
        }

        public override void Arrange()
        {
<# if (i == 1) { #>
            prereqs = arrange();
<# } else if (i > 1) { #>
            (<#= List(i, i => $"prereqs.Item{i}") #>) = (<#= List(i, i => $"arrange.Item{i}()") #>);
<# } #>
        }

        /// <summary>
        /// Invokes the test action.
        /// </summary>
        public override void Act()
        {
            if (invocationResult != null)
            {
                throw new InvalidOperationException("Test action already invoked");
            }

            try
            {
                invocationResult = new TestFunctionResult<TResult>(act(<#= i == 1 ? "prereqs" : List(i, i => $"prereqs.Item{i}") #>));
            }
            catch (Exception e)
            {
                invocationResult = new TestFunctionResult<TResult>(e);
            }
        }

        /// <summary>
        /// Named assertions that should all succeed (that is, not throw) once <see cref="Act"/> has been invoked.
        /// </summary>
        public override IEnumerable<TestAssertion> Assertions { get; }

        private class Assertion : TestAssertion
        {
            private readonly TestFunction<<#= TList(i, "", ", ") #>TResult> test;
            private readonly Action<<#= TList(i, "", ", ") #>TestFunctionResult<TResult>> action;

            public Assertion(TestFunction<<#= TList(i, "", ", ") #>TResult> test, Action<<#= TList(i, "", ", ") #>TestFunctionResult<TResult>> action, string description)
            {
                this.test = test;
                this.action = action;
                this.Description = description;
            }

            public override string Description { get; }

            public override void Invoke() => action(<#= i == 1 ? "test.prereqs, " : List(i, i => $"test.prereqs.Item{i}", "", ", ") #>test.invocationResult);
        }
    }
<# } #>
}