<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="_Common.t4" #>
using FlUnit.Configuration;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace FlUnit
{
<# for(int i = 0; i <= MaxPrerequisiteCount; i++) { #>
<# WriteLineIf(i > 0); #>
    /// <summary>
    /// Represents a test with <#= i #> "Given" clause<#= Plural(i) #> and a "When" clause that does not return a value.
    /// </summary>
<# WriteTypeParamDocs(i, i => $"The type of the { Ordinal(i) } \"Given\" clause of the test."); #>
    public sealed class ActionTest<#= TList(i, "<", ">") #> : Test
    {
        private readonly IEnumerable<Action<ITestConfiguration>> configurationOverrides;
<# WriteLineIf(i > 0, $"private readonly {ArrangeFieldType(i)} arrange;", 2); #>
        private readonly Func<<#= TList(i, "", ", ") #>ValueTask> act;
        private readonly Func<Case, IEnumerable<Assertion>> makeAssertions;
        private IReadOnlyCollection<ITestCase> cases;

        /// <summary>
        /// Initializes a new instance of the <see cref="ActionTest<#= TList(i, "{", "}") #>"/> class.
        /// </summary>
        /// <param name="configurationOverrides">Configuration overrides that the test should apply when run.</param>
<# WriteLineIf(i > 0, "/// <param name=\"arrange\">The callback to run the \"Given\" clauses of the test, returning the test cases.</param>", 2); #>
        /// <param name="act">The callback to run the "When" clause of the test.</param>
        /// <param name="makeAssertions">The callback to create all of the assertions for a particular test case.</param>
        internal ActionTest(
            IEnumerable<Action<ITestConfiguration>> configurationOverrides,
<# WriteLineIf(i > 0, $"{ArrangeFieldType(i)} arrange,", 3); #>
            Func<<#= TList(i, "", ", ") #>ValueTask> act,
            Func<Case, IEnumerable<Assertion>> makeAssertions)
        {
            this.configurationOverrides = configurationOverrides;
<# WriteLineIf(i > 0, "this.arrange = arrange;", 3); #>
            this.act = act;
            this.makeAssertions = makeAssertions;
        }

        /// <inheritdoc />
        public override IReadOnlyCollection<ITestCase> Cases => cases ?? throw new InvalidOperationException("Test not yet arranged");

        /// <inheritdoc />
        public override bool HasConfigurationOverrides => configurationOverrides.Any();

        /// <inheritdoc />
        public override void ApplyConfigurationOverrides(ITestConfiguration testConfiguration)
        {
            foreach (var configurationOverride in configurationOverrides)
            {
                configurationOverride(testConfiguration);
            }
        }

        /// <inheritdoc />
        public override async ValueTask ArrangeAsync(ITestContext testContext)
        {
            try
            {
<# if (i == 0) { #>
                cases = new[] { new Case(this, act, makeAssertions) };
<# } else if (i == 1) { #>
                cases = (await arrange(testContext)).Select(p => new Case(this, p, act, makeAssertions)).ToArray();
<# } else if (i > 1) { #>
                // TODO: can probably assume these are safe to execute in parallel?
<# for (int j = 0; j < i; j++) { #>
                var p<#= j + 1 #>s = await arrange.Item<#= j + 1 #>(testContext);
<# } #>
                cases = (
<# for (int j = 0; j < i; j++) { #>
                    from p<#= j + 1 #> in p<#= j + 1 #>s
<# } #>
                    select new Case(this, (<#= List(i, i => $"p{i}") #>), act, makeAssertions)).ToArray();
<# } #>
            }
            catch (Exception e)
            {
                throw new TestFailureException(string.Format(Messages.ArrangementFailureMessageFormat, e.Message), e.StackTrace, e);
            }
        }

        /// <inheritdoc />
        public override void Dispose()
        {
            // TODO: allow for tidy-up. perhaps dispose IDisposable prereqs (on the assumption that we
            // own them) or invoke custom dispose method..
        }

        /// <summary>
        /// Implementation of <see cref="ITestCase"/> used by <see cref="ActionTest<#= TList(i, "{", "}") #>"/>s.
        /// </summary>
        public class Case : ITestCase
        {
            private readonly Test test;
<# WriteLineIf(i > 0, $"internal readonly {PrereqsFieldType(i)} prereqs;", 3); #>
            private readonly Func<<#= TList(i, "", ", ") #>ValueTask> act;
            internal TestActionOutcome invocationOutcome;

            internal Case(
                Test test,
<# WriteLineIf(i > 0, $"{PrereqsFieldType(i)} prereqs,", 4); #>
                Func<<#= TList(i, "", ", ") #>ValueTask> act,
                Func<Case, IEnumerable<Assertion>> makeAssertions)
            {
                this.test = test;
<# WriteLineIf(i > 0, "this.prereqs = prereqs;", 4); #>
                this.act = act;
                this.Assertions = makeAssertions(this).ToArray();
            }

            /// <inheritdoc />
            public IReadOnlyCollection<ITestAssertion> Assertions { get; }

            /// <inheritdoc />
            public async ValueTask ActAsync()
            {
                if (invocationOutcome != null)
                {
                    throw new InvalidOperationException("Test action already invoked");
                }

                try
                {
                    await act(<#= i == 1 ? "prereqs" : List(i, i => $"prereqs.Item{i}") #>);
                    invocationOutcome = new TestActionOutcome();
                }
                catch (Exception e)
                {
                    invocationOutcome = new TestActionOutcome(e);
                }
            }

            /// <inheritdoc />
            // TODO: Ultimately I'd like to offer some light support for format strings - perhaps something like (empty/"g"/"G" for the current behaviour, )
            // i for "test case #", and (when there are multiple prereqs) an integer for the prequisite of that index.
            public string ToString(string format, IFormatProvider formatProvider)
            {
<# if (i == 0) { #>
                return "[implicit test case]";
<# } else if (i == 1) { #>
                string prereqToString = prereqs.ToString();

                if (prereqToString.Equals(prereqs.GetType().ToString()))
                {
                    return $"test case #{Array.IndexOf(test.Cases.ToArray(), this) + 1}";
                }
                else
                {
                    return prereqToString;
                }
<# } else { #>
                List<string> nonTypeNames = new();

                var tuple = prereqs as ITuple;
                for (var i = 0; i < tuple.Length; i++)
                {
                    var item = tuple[i];
                    var itemToString = item.ToString();
                    if (!itemToString.Equals(item.GetType().ToString()))
                    {
                        nonTypeNames.Add(itemToString);
                    }
                }

                if (nonTypeNames.Count == 0)
                {
                    return $"test case #{Array.IndexOf(test.Cases.ToArray(), this) + 1}";
                }
                else if (nonTypeNames.Count == 1)
                {
                    return nonTypeNames[0];
                }
                else
                {
                    return $"({string.Join(", ", nonTypeNames)})";
                }
<# } #>
            }

            /// <inheritdoc />
            public override string ToString()
            {
                return ToString(null, null);
            }
        }

        /// <summary>
        /// Implementation of <see cref="ITestAssertion"/> used by <see cref="ActionTest<#= TList(i, "{", "}") #>"/>s.
        /// </summary>
        public class Assertion : ITestAssertion
        {
            private readonly Case testCase;
            private readonly Func<<#= TList(i, "", ", ") #>TestActionOutcome, ValueTask> assert;
            private readonly string description;

            internal Assertion(
                Case testCase,
                Func<<#= TList(i, "", ", ") #>TestActionOutcome, ValueTask> assert,
                string description)
            {
                this.testCase = testCase;
                this.assert = assert;
                this.description = description;
            }

            /// <inheritdoc />
            public async ValueTask AssertAsync()
            {
                if (testCase.invocationOutcome == null)
                {
                    throw new InvalidOperationException("Test action has not yet been invoked");
                }

                try
                {
                    await assert(<#= i == 1 ? "testCase.prereqs, " : List(i, i => $"testCase.prereqs.Item{i}", "", ", ") #>testCase.invocationOutcome);
                }
                catch (Exception e) when (e is not ITestFailureDetails)
                {
                    throw new TestFailureException(e.Message, e.StackTrace, e);
                }
            }

            /// <inheritdoc />
            public string ToString(string format, IFormatProvider formatProvider)
            {
                return description;
            }

            /// <inheritdoc />
            public override string ToString()
            {
                return ToString(null, null);
            }
        }
    }
<# } #>
}