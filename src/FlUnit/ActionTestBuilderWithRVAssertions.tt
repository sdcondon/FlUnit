<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="_Common.t4" #>
using FlUnit.Configuration;
using System;
using System.Collections.Generic;
using System.Linq;
#if NET6_0_OR_GREATER
using System.Runtime.CompilerServices;
#else
using System.Linq.Expressions;
#endif
using System.Runtime.ExceptionServices;
using System.Threading.Tasks;

namespace FlUnit
{
<# for(int i = 0; i <= MaxPrerequisiteCount; i++) { #>
<# WriteLineIf(i > 0); #>
    /// <summary>
    /// Builder for providing additional assertions for a test with <#= i #> "Given" clause<#= Plural(i) #>,
    /// for which the "When" clause does not return a value but is expected to successfully return.
    /// </summary>
<# WriteTypeParamDocs(i, i => $"The type of the { Ordinal(i) } \"Given\" clause of the test."); #>
    public sealed class ActionTestBuilderWithRVAssertions<#= TList(i, "<", ">") #>
    {
        private readonly IEnumerable<Action<ITestConfiguration>> configurationOverrides;
<# WriteLineIf(i > 0, $"private readonly {ArrangeFieldType_ValueTask(i)} arrange;", 2); #>
        private readonly Func<<#= TList(i, "", ", ") #>ValueTask> testAction;
        private readonly List<AssertionImpl> assertions = new();

        internal ActionTestBuilderWithRVAssertions(
            IEnumerable<Action<ITestConfiguration>> configurationOverrides,
<# WriteLineIf(i > 0, $"{ArrangeFieldType_ValueTask(i)} arrange,", 3); #>
            Func<<#= TList(i, "", ", ") #>ValueTask> testAction,
            AssertionImpl assertion)
        {
            this.configurationOverrides = configurationOverrides;
<# WriteLineIf(i > 0, $"this.arrange = arrange;", 3); #>
            this.testAction = testAction;
            assertions.Add(assertion);
        }

        /// <summary>
        /// Implicitly converts a <see cref="ActionTestBuilderWithRVAssertions<#= TList(i, "{", "}") #>"/> to a <see cref="Test"/> (by building it).
        /// </summary>
        /// <param name="builder">The builder to convert.</param>
        public static implicit operator Test(ActionTestBuilderWithRVAssertions<#= TList(i, "<", ">") #> builder)
        {
            return new ActionTest<#= TList(i, "<", ">") #>(
                builder.configurationOverrides,
<# WriteLineIf(i > 0, $"builder.arrange,", 4); #>
                builder.testAction,
                tc => builder.assertions.Select(a => new ActionTest<#= TList(i, "<", ">") #>.Assertion(tc, a.Invoke, a.Description)));
        }

        /// <summary>
        /// Adds an additional assertion for the test.
        /// </summary>
        /// <param name="assertion">The assertion. It should have one parameter for each "Given" clause (if any).</param>
        /// <param name="description">The description of the assertion. Optional.</param>
        /// <param name="assertionExpression">
        /// Automatically populated by the compiler - takes the value of the argument expression passed to the assertion parameter.
        /// Used as the description of the assertion if no description is provided - after a little processing (namely, lambda expressions are trimmed so that only their body remains).
        /// </param>
        /// <returns>A builder for providing additional assertions for the test.</returns>
        public ActionTestBuilderWithRVAssertions<#= TList(i, "<", ">") #> And(
            Action<#= TList(i, "<", ">") #> assertion,
            string description = null,
            [CallerArgumentExpression("assertion")] string assertionExpression = null)
        {
            assertions.Add(new AssertionImpl(assertion.ToAsyncWrapper(), description ?? AssertionExpressionHelpers.ToAssertionDescription(assertionExpression)));
            return this;
        }

        /// <summary>
        /// Adds an additional assertion for the test.
        /// </summary>
        /// <param name="asyncAssertion">The assertion. It should have one parameter for each "Given" clause (if any).</param>
        /// <param name="description">The description of the assertion. Optional.</param>
        /// <param name="assertionExpression">
        /// Automatically populated by the compiler - takes the value of the argument expression passed to the assertion parameter.
        /// Used as the description of the assertion if no description is provided - after a little processing (namely, lambda expressions are trimmed so that only their body remains).
        /// </param>
        /// <returns>A builder for providing additional assertions for the test.</returns>
        public ActionTestBuilderWithRVAssertions<#= TList(i, "<", ">") #> AndAsync(
            Func<<#= TList(i, "", ", ") #>Task> asyncAssertion,
            string description = null,
            [CallerArgumentExpression("asyncAssertion")] string assertionExpression = null)
        {
            assertions.Add(new AssertionImpl(asyncAssertion.ToAsyncWrapper(), description ?? AssertionExpressionHelpers.ToAssertionDescription(assertionExpression)));
            return this;
        }

        internal class AssertionImpl
        {
            private readonly Func<<#= TList(i, "", ", ") #>ValueTask> assert;

            internal AssertionImpl(Func<<#= TList(i, "", ", ") #>ValueTask> assert, string description)
            {
                this.assert = assert;
                Description = description;
            }

            internal AssertionImpl(string description)
            {
                Description = description;
            }

            public string Description { get; }

            internal ValueTask Invoke(<#= List(i, i => $"T{i} a{i}", "", ", ") #>TestActionOutcome outcome)
            {
                outcome.ThrowIfException();
                return assert?.Invoke(<#= List(i, i => $"a{i}") #>) ?? ValueTask.CompletedTask;
            }
        }
    }
<# } #>
}
