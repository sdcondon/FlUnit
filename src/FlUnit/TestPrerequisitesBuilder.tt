<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="_Common.t4" #>
<#

string PrerequisiteBuilderPrereqArg(int i)
{
    if (i == 0)
    {
        return "";
    }
    else if (i == 1)
    {
        return ", arrange";
    }
    else
    {
        return $", ({ List(i, i => $"arrange.Item{i}") })";
    }
}

string NextPrerequisiteBuilderPrereqArg_Sync(int i, bool isEachOf, bool isUsingTestContext)
{
    var nextPrereq = (isEachOf, isUsingTestContext) switch
    {
         (false, false) => $"new SinglePrerequisiteClosure<T{i + 1}>(tc => prereqGetter{i + 1}.ToAsyncWrapper()()).Arrange",
         (false, true) => $"new SinglePrerequisiteClosure<T{i + 1}>(prereqGetter{i + 1}.ToAsyncWrapper()).Arrange",
         (true, false) => $"tc => prereqsGetter{i + 1}.ToAsyncWrapper()()", // ugly stack frames!
         (true, true) => $"prereqsGetter{i + 1}.ToAsyncWrapper()",
    };

    return NextPrerequisiteBuilderPrereqArg(i, nextPrereq);
}

string NextPrerequisiteBuilderPrereqArg_Async(int i, bool isEachOf, bool isUsingTestContext)
{
    var nextPrereq = (isEachOf, isUsingTestContext) switch
    {
         (false, false) => $"new SinglePrerequisiteClosure<T{i + 1}>(tc => prereqGetter{i + 1}.ToAsyncWrapper()()).Arrange",
         (false, true) => $"new SinglePrerequisiteClosure<T{i + 1}>(prereqGetter{i + 1}.ToAsyncWrapper()).Arrange",
         (true, false) => $"tc => prereqsGetter{i + 1}.ToAsyncWrapper()()", // ugly stack frames!
         (true, true) => $"prereqsGetter{i + 1}.ToAsyncWrapper()",
    };

    return NextPrerequisiteBuilderPrereqArg(i, nextPrereq);
}

string NextPrerequisiteBuilderPrereqArg_TestContext(int i)
{
    var nextPrereq = $"new SinglePrerequisiteClosure<ITestContext>(new Func<ITestContext, ITestContext>(ctx => ctx).ToAsyncWrapper()).Arrange";
    return NextPrerequisiteBuilderPrereqArg(i, nextPrereq);
}

string NextPrerequisiteBuilderPrereqArg(int i, string nextPrereq)
{
    if (i == 0)
    {
        return nextPrereq;
    }
    else if (i == 1)
    {
        return $"(arrange, {nextPrereq})";
    }
    else
    {
        return $"({ List(i, i => $"arrange.Item{i}") }, {nextPrereq})";
    }
}

#>
using FlUnit.Configuration;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace FlUnit
{
<# for(int i = 0; i <= MaxPrerequisiteCount; i++) { #>
<# WriteLineIf(i > 0); #>
	/// <summary>
    /// Test builder for which the "When" clause has not yet been provided - and as such can still be given more prerequisites
    /// (and configuration overrides).
    /// </summary>
<# WriteTypeParamDocs(i, i => $"The type of the { Ordinal(i) } prerequisite already defined.", 1); #>
	public sealed class TestPrerequisitesBuilder<#= TList(i, "<", ">") #>
	{
        private readonly IEnumerable<Action<ITestConfiguration>> configurationOverrides;
<# WriteLineIf(i > 0, $"private readonly {ArrangeFieldType_ValueTask(i)} arrange;", 2); #>

		internal TestPrerequisitesBuilder(
            IEnumerable<Action<ITestConfiguration>> configurationOverrides<#= i == 0 ? ")" : "," #>
<# WriteLineIf(i > 0, $"{ArrangeFieldType_ValueTask(i)} arrange)", 3); #>
        {
            this.configurationOverrides = configurationOverrides;
<# WriteLineIf(i > 0, "this.arrange = arrange;", 3); #>
        }

        /// <summary>
        /// Adds a configuration override for the test.
        /// </summary>
        /// <param name="configurationOverride">The configuration override to be added.</param>
        public TestPrerequisitesBuilder<#= TList(i, "<", ">") #> UsingConfiguration(Action<ITestConfiguration> configurationOverride)
        {
            // NB: We define a new enumerable and builder when overrides are added to facilitate builder re-use.
            // However, only create the new enumerable if an override is added (as opposed to in the ctor), to cut down on needless GC load.
            var overrides = new List<Action<ITestConfiguration>>(configurationOverrides);
            overrides.Add(configurationOverride);

            return new TestPrerequisitesBuilder<#= TList(i, "<", ">") #>(overrides<#= PrerequisiteBuilderPrereqArg(i) #>);
        }
<# if (i == 0) { #>

        /// <summary>
        /// Adds the first "Given" clause for the test.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqGetter<#= i + 1 #>">A delegate for obtaining the prerequisite.</param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> Given<T<#= i + 1 #>>(Func<T<#= i + 1 #>> prereqGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Sync(i, false, false) #>);
        }

        /// <summary>
        /// Adds the first "Given" clause for the test, making use of the test context.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqGetter<#= i + 1 #>">
        /// A delegate for obtaining the prerequisite.
        /// It will be passed an object representing the test context by the test runner.
        /// This can be used to write output, register test result attachments and so on.
        /// </param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> Given<T<#= i + 1 #>>(Func<ITestContext, T<#= i + 1 #>> prereqGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Sync(i, false, true) #>);
        }

        /// <summary>
        /// Adds the first "Given" clause for the test.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqGetter<#= i + 1 #>">A delegate for obtaining the prerequisite asynchronously.</param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> GivenAsync<T<#= i + 1 #>>(Func<Task<T<#= i + 1 #>>> prereqGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Async(i, false, false) #>);
        }

        /// <summary>
        /// Adds the first "Given" clause for the test, making use of the test context.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqGetter<#= i + 1 #>">
        /// A delegate for obtaining the prerequisite asynchronously.
        /// It will be passed an object representing the test context by the test runner.
        /// This can be used to observe test cancellation, write output, register test result attachments and so on.
        /// </param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> GivenAsync<T<#= i + 1 #>>(Func<ITestContext, Task<T<#= i + 1 #>>> prereqGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Async(i, false, true) #>);
        }

        /// <summary>
        /// Adds the first "Given" clause for the test.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqsGetter<#= i + 1 #>">A delegate for obtaining the prerequisites, one for each test case.</param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> GivenEachOf<T<#= i + 1 #>>(Func<IEnumerable<T<#= i + 1 #>>> prereqsGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Sync(i, true, false) #>);
        }

        /// <summary>
        /// Adds the first "Given" clause for the test, making use of the test context.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqsGetter<#= i + 1 #>">
        /// A delegate for obtaining the prerequisites, one for each test case.
        /// It will be passed an object representing the test context by the test runner.
        /// This can be used to write output, register test result attachments and so on.
        /// </param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> GivenEachOf<T<#= i + 1 #>>(Func<ITestContext, IEnumerable<T<#= i + 1 #>>> prereqsGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Sync(i, true, true) #>);
        }

        /// <summary>
        /// Adds the first "Given" clause for the test.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqsGetter<#= i + 1 #>">A delegate for obtaining the prerequisites, one for each test case, asynchronously.</param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> GivenEachOfAsync<T<#= i + 1 #>>(Func<Task<IEnumerable<T<#= i + 1 #>>>> prereqsGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Async(i, true, false) #>);
        }

        /// <summary>
        /// Adds the first "Given" clause for the test, making use of the test context.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqsGetter<#= i + 1 #>">
        /// A delegate for obtaining the prerequisites, one for each test case, asynchronously.
        /// It will be passed an object representing the test context by the test runner.
        /// This can be used to observe test cancellation, write output, register test result attachments and so on.
        /// </param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> GivenEachOfAsync<T<#= i + 1 #>>(Func<ITestContext, Task<IEnumerable<T<#= i + 1 #>>>> prereqsGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Async(i, true, true) #>);
        }

        /// <summary>
        /// Adds the first "Given" clause for the test - that defines the test context as the prerequisite. This is just a more readable alias of:
        /// <code>
        /// Given(ctx => ctx)
        /// </code>
        /// </summary>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<ITestContext> GivenTestContext()
        {
            return new TestPrerequisitesBuilder<ITestContext>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_TestContext(i) #>);
        }
<# } else if (i < MaxPrerequisiteCount) { #>

        /// <summary>
        /// Adds another "Given" clause for the test.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqGetter<#= i + 1 #>">A delegate for obtaining the prerequisite.</param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> And<T<#= i + 1 #>>(Func<T<#= i + 1 #>> prereqGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Sync(i, false, false) #>);
        }
        
        /// <summary>
        /// Adds another "Given" clause for the test, making use of the test context.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqGetter<#= i + 1 #>">
        /// A delegate for obtaining the prerequisite.
        /// It will be passed an object representing the test context by the test runner.
        /// This can be used to write output, register test result attachments and so on.
        /// </param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> And<T<#= i + 1 #>>(Func<ITestContext, T<#= i + 1 #>> prereqGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Sync(i, false, true) #>);
        }

        /// <summary>
        /// Adds another "Given" clause for the test.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqGetter<#= i + 1 #>">A delegate for obtaining the prerequisite asynchronously.</param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> AndAsync<T<#= i + 1 #>>(Func<Task<T<#= i + 1 #>>> prereqGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Async(i, false, false) #>);
        }
        
        /// <summary>
        /// Adds another "Given" clause for the test, making use of the test context.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqGetter<#= i + 1 #>">
        /// A delegate for obtaining the prerequisite asynchronously.
        /// It will be passed an object representing the test context by the test runner.
        /// This can be used to observe test cancellation, write output, register test result attachments and so on.
        /// </param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> AndAsync<T<#= i + 1 #>>(Func<ITestContext, Task<T<#= i + 1 #>>> prereqGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Async(i, false, true) #>);
        }

        /// <summary>
        /// Adds another "Given" clause for the test.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqsGetter<#= i + 1 #>">A delegate for obtaining the prerequisites, one for each test case.</param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> AndEachOf<T<#= i + 1 #>>(Func<IEnumerable<T<#= i + 1 #>>> prereqsGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Sync(i, true, false) #>);
        }
        
        /// <summary>
        /// Adds another "Given" clause for the test, making use of the test context.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqsGetter<#= i + 1 #>">
        /// A delegate for obtaining the prerequisites, one for each test case.
        /// It will be passed an object representing the test context by the test runner.
        /// This can be used to write output, register test result attachments and so on.
        /// </param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> AndEachOf<T<#= i + 1 #>>(Func<ITestContext, IEnumerable<T<#= i + 1 #>>> prereqsGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Sync(i, true, true) #>);
        }

        /// <summary>
        /// Adds another "Given" clause for the test.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqsGetter<#= i + 1 #>">A delegate for obtaining the prerequisites, one for each test case, asynchronously.</param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> AndEachOfAsync<T<#= i + 1 #>>(Func<Task<IEnumerable<T<#= i + 1 #>>>> prereqsGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Async(i, true, false) #>);
        }
        
        /// <summary>
        /// Adds another "Given" clause for the test, making use of the test context.
        /// </summary>
        /// <typeparam name="T<#= i + 1 #>">The type of the prerequisite.</typeparam>
        /// <param name="prereqsGetter<#= i + 1 #>">
        /// A delegate for obtaining the prerequisites, one for each test case, asynchronously.
        /// It will be passed an object representing the test context by the test runner.
        /// This can be used to observe test cancellation, write output, register test result attachments and so on.
        /// </param>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i + 1) #>> AndEachOfAsync<T<#= i + 1 #>>(Func<ITestContext, Task<IEnumerable<T<#= i + 1 #>>>> prereqsGetter<#= i + 1 #>)
        {
            return new TestPrerequisitesBuilder<<#= TList(i + 1) #>>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_Async(i, true, true) #>);
        }

        /// <summary>
        /// Adds a "Given" clause for the test that defines the test context as a prerequisite. This is just a more readable alias of:
        /// <code>
        /// And(ctx => ctx)
        /// </code>
        /// </summary>
        /// <returns>A builder for providing more "Given" clauses or the "When" clause for the test.</returns>
        public TestPrerequisitesBuilder<<#= TList(i) #>, ITestContext> AndTestContext()
        {
            return new TestPrerequisitesBuilder<<#= TList(i) #>, ITestContext>(configurationOverrides, <#= NextPrerequisiteBuilderPrereqArg_TestContext(i) #>);
        }
<# } #>

        /// <summary>
        /// Adds a "When" clause that does not return a value.
        /// </summary>
        /// <param name="testAction">The action that is the "When" clause of the test. It should have one parameter for each defined "Given" clause (if any).</param>
        /// <returns>A builder for providing "Then" clauses.</returns>
        public ActionTestBuilder<#= TList(i, "<", ">") #> When(Action<#= TList(i, "<", ">") #> testAction)
        {
            return new ActionTestBuilder<#= TList(i, "<", ">") #>(configurationOverrides, <# WriteIf(i > 0, "arrange, "); #>testAction.ToAsyncWrapper());
        }

        /// <summary>
        /// Adds a "When" clause that returns a value.
        /// </summary>
        /// <param name="testFunction">The function that is the "When" clause of the test. It should have one parameter for each defined "Given" clause (if any).</param>
        /// <returns>A builder for providing "Then" clauses.</returns>
        public FunctionTestBuilder<<#= TList(i, "", ", ") #>TResult> When<TResult>(Func<<#= TList(i, "", ", ") #>TResult> testFunction)
        {
            return new FunctionTestBuilder<<#= TList(i, "", ", ") #>TResult>(configurationOverrides, <# WriteIf(i > 0, "arrange, "); #>testFunction.ToAsyncWrapper());
        }

        /// <summary>
        /// Adds a "When" clause that does not return a value.
        /// </summary>
        /// <param name="asyncTestAction">The action that is the "When" clause of the test. It should have one parameter for each defined "Given" clause (if any).</param>
        /// <returns>A builder for providing "Then" clauses.</returns>
        public ActionTestBuilder<#= TList(i, "<", ">") #> WhenAsync(Func<<#= TList(i, "", ", ") #>Task> asyncTestAction)
        {
            return new ActionTestBuilder<#= TList(i, "<", ">") #>(configurationOverrides, <# WriteIf(i > 0, "arrange, "); #>asyncTestAction.ToAsyncWrapper());
        }

        /// <summary>
        /// Adds a "When" clause that returns a value.
        /// </summary>
        /// <param name="asyncTestFunction">The function that is the "When" clause of the test. It should have one parameter for each defined "Given" clause (if any).</param>
        /// <returns>A builder for providing "Then" clauses.</returns>
        public FunctionTestBuilder<<#= TList(i, "", ", ") #>TResult> WhenAsync<TResult>(Func<<#= TList(i, "", ", ") #>Task<TResult>> asyncTestFunction)
        {
            return new FunctionTestBuilder<<#= TList(i, "", ", ") #>TResult>(configurationOverrides, <# WriteIf(i > 0, "arrange, "); #>asyncTestFunction.ToAsyncWrapper());
        }
	}
<# } #>}