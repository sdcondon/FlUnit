<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="_Common.t4" #>
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace FlUnit
{
    /// <summary>
    /// Builder for providing additional assertions for a test with no "Given" clauses
    /// and for which the "When" clause does not return a value.
    /// </summary>
    public sealed class TestBuilderWithActionAndAssertions
    {
        private readonly Action testAction;
        private readonly List<Assertion> assertions = new List<Assertion>();

        internal TestBuilderWithActionAndAssertions(Action testAction, Assertion assertion)
        {
            this.testAction = testAction;
            assertions.Add(assertion);
        }
        
        public static implicit operator Test(TestBuilderWithActionAndAssertions builder)
        {
            return new TestAction(builder.testAction, builder.assertions);
        }

        /// <summary>
        /// Adds an additional assertion for the test.
        /// </summary>
        /// <param name="assertion">The assertion.</param>
        /// <returns>A builder for providing additional assertions for the test.</returns>
        public TestBuilderWithActionAndAssertions And(Expression<Action<TestActionResult>> assertion)
        {
            assertions.Add(new Assertion(assertion));
            return this;
        }

        /// <summary>
        /// Adds an additional assertion for the test.
        /// </summary>
        /// <param name="assertion">The assertion.</param>
        /// <param name="description">The description of the assertion.</param>
        /// <returns>A builder for providing additional assertions for the test.</returns>
        public TestBuilderWithActionAndAssertions And(Action<TestActionResult> assertion, string description)
        {
            assertions.Add(new Assertion(assertion, description));
            return this;
        }

        internal class Assertion
        {
            internal Assertion(Action<TestActionResult> action, string description)
            {
                Action = action;
                Description = description;
            }

            internal Assertion(Expression<Action<TestActionResult>> expression)
            {
                Action = expression.Compile();
                Description = expression.Body.ToString();
            }

            public Action<TestActionResult> Action { get; }

            public string Description { get; }
        }
    }

<# for(int i = 1; i <= MaxPrerequisiteCount; i++) { #>
    /// <summary>
    /// Builder for providing additional assertions for a test with a <#= i #> "Given" clauses
    /// and for which the "When" clause does not return a value.
    /// </summary>
    <#= TypeParamDocs(i, i => $"The type of the { Ordinal(i) } \"Given\" clause of the test.") #>
    public sealed class TestBuilderWithActionAndAssertions<<#= TypeParamList(i) #>>
    {
        private readonly <#= ArrangeFieldType(i) #> arrange;
        private readonly Action<<#= TypeParamList(i) #>> testAction;
        private readonly List<Assertion> assertions = new List<Assertion>();

        internal TestBuilderWithActionAndAssertions(<#= ArrangeFieldType(i) #> arrange, Action<<#= TypeParamList(i) #>> testAction, Assertion assertion)
        {
            this.arrange = arrange;
            this.testAction = testAction;
            assertions.Add(assertion);
        }

        public static implicit operator Test(TestBuilderWithActionAndAssertions<<#= TypeParamList(i) #>> builder)
        {
            return new TestAction<<#= TypeParamList(i) #>>(builder.arrange, builder.testAction, builder.assertions);
        }

        /// <summary>
        /// Adds an additional assertion for the test.
        /// </summary>
        /// <param name="assertion">The assertion.</param>
        /// <returns>A builder for providing additional assertions for the test.</returns>
        public TestBuilderWithActionAndAssertions<<#= TypeParamList(i) #>> And(Expression<Action<<#= TypeParamList(i) #>, TestActionResult>> assertion)
        {
            assertions.Add(new Assertion(assertion));
            return this;
        }

        /// <summary>
        /// Adds an additional assertion for the test.
        /// </summary>
        /// <param name="assertion">The assertion.</param>
        /// <param name="description">The description of the assertion.</param>
        /// <returns>A builder for providing additional assertions for the test.</returns>
        public TestBuilderWithActionAndAssertions<<#= TypeParamList(i) #>> And(Action<<#= TypeParamList(i) #>, TestActionResult> assertion, string description)
        {
            assertions.Add(new Assertion(assertion, description));
            return this;
        }

        internal class Assertion
        {
            internal Assertion(Action<<#= TypeParamList(i) #>, TestActionResult> action, string description)
            {
                Action = action;
                Description = description;
            }

            internal Assertion(Expression<Action<<#= TypeParamList(i) #>, TestActionResult>> expression)
            {
                Action = expression.Compile();
                Description = expression.Body.ToString();
            }

            public Action<<#= TypeParamList(i) #>, TestActionResult> Action { get; }

            public string Description { get; }
        }
    }

<# } #>
}
