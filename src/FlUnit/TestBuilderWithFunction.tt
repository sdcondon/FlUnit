<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="_Common.t4" #>
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace FlUnit
{
<# for(int i = 0; i <= MaxPrerequisiteCount; i++) { #>
<# WriteLineIf(i > 0); #>
    /// <summary>
    /// Builder for providing the first assertion for a test with <#= i #> "Given" clause<#= Plural(i) #>
    /// and for which the "When" clause returns a value.
    /// </summary>
<# WriteTypeParamDocs(i, i => $"The type of the { Ordinal(i) } \"Given\" clause of the test."); #>
    /// <typeparam name="TResult">The return type of the "When" clause of the test.</typeparam>
    public sealed class TestBuilderWithFunction<<#= TList(i, "", ", ") #>TResult>
    {
<# WriteLineIf(i > 0, $"private readonly {ArrangeFieldType(i)} arrange;", 2); #>
        private readonly Func<<#= TList(i, "", ", ") #>TResult> testFunction;

        internal TestBuilderWithFunction(
<# WriteLineIf(i > 0, $"{ArrangeFieldType(i)} arrange,", 3); #>
            Func<<#= TList(i, "", ", ") #>TResult> testFunction)
        {
<# WriteLineIf(i > 0, $"this.arrange = arrange;", 3); #>
            this.testFunction = testFunction;
        }

        /// <summary>
        /// Adds the first assertion for the test.
        /// </summary>
        /// <param name="assertion">The assertion.</param>
        /// <returns>A builder for providing additional assertions for the test.</returns>
        public TestBuilderWithFunctionAndAssertions<<#= TList(i, "", ", ") #>TResult> Then(Expression<Action<<#= TList(i, "", ", ") #>TestFunctionOutcome<TResult>>> assertion)
        {
            return new TestBuilderWithFunctionAndAssertions<<#= TList(i, "", ", ") #>TResult>(
<# WriteLineIf(i > 0, "arrange,", 4); #>
                testFunction,
                new TestBuilderWithFunctionAndAssertions<<#= TList(i, "", ", ") #>TResult>.Assertion(assertion));
        }

        /// <summary>
        /// Adds the first assertion for the test.
        /// </summary>
        /// <param name="assertion">The assertion.</param>
        /// <param name="description">The description of the assertion.</param>
        /// <returns>A builder for providing additional assertions for the test.</returns>
        public TestBuilderWithFunctionAndAssertions<<#= TList(i, "", ", ") #>TResult> Then(
            Action<<#= TList(i, "", ", ") #>TestFunctionOutcome<TResult>> assertion,
            string description)
        {
            return new TestBuilderWithFunctionAndAssertions<<#= TList(i, "", ", ") #>TResult>(
<# WriteLineIf(i > 0, "arrange,", 4); #>
                testFunction,
                new TestBuilderWithFunctionAndAssertions<<#= TList(i, "", ", ") #>TResult>.Assertion(assertion, description));
        }
    }
<# } #>
}