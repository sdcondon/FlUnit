<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="_Common.t4" #>
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace FlUnit
{
<# for(int i = 0; i <= MaxPrerequisiteCount; i++) { #>
<# WriteLineIf(i > 0); #>
    /// <summary>
    /// Builder for providing the first assertion for a test with <#= i #> "Given" clause<#= Plural(i) #>
    /// and for which the "When" clause does not return a value.
    /// </summary>
<# WriteTypeParamDocs(i, i => $"The type of the { Ordinal(i) } \"Given\" clause of the test."); #>
    public sealed class TestBuilderWithAction<#= TList(i, "<", ">") #>
    {
<# WriteLineIf(i > 0, $"private readonly {ArrangeFieldType(i)} arrange;", 2); #>
        private readonly Action<#= TList(i, "<", ">") #> testAction;

        internal TestBuilderWithAction(
<# WriteLineIf(i > 0, $"{ArrangeFieldType(i)} arrange,", 3); #>
            Action<#= TList(i, "<", ">") #> testAction)
        {
<# WriteLineIf(i > 0, "this.arrange = arrange;", 3); #>
            this.testAction = testAction;
        }

        /// <summary>
        /// Adds the first assertion for the test.
        /// </summary>
        /// <param name="assertion">The assertion.</param>
        /// <returns>A builder for providing additional assertions for the test.</returns>
        public TestBuilderWithActionAndAssertions<#= TList(i, "<", ">") #> Then(Expression<Action<#= TList(i, "<", ">") #>> assertion)
        {
            return new TestBuilderWithActionAndAssertions<#= TList(i, "<", ">") #>(
<# WriteLineIf(i > 0, "arrange,", 4); #>
                testAction,
                new TestBuilderWithActionAndAssertions<#= TList(i, "<", ">") #>.Assertion(assertion));
        }

        /// <summary>
        /// Adds the first assertion for the test.
        /// </summary>
        /// <param name="assertion">The assertion.</param>
        /// <param name="description">The description of the assertion.</param>
        /// <returns>A builder for providing additional assertions for the test.</returns>
        public TestBuilderWithActionAndAssertions<#= TList(i, "<", ">") #> Then(Action<#= TList(i, "<", ">") #> assertion, string description)
        {
            return new TestBuilderWithActionAndAssertions<#= TList(i, "<", ">") #>(
<# WriteLineIf(i > 0, "arrange,", 4); #>
                testAction,
                new TestBuilderWithActionAndAssertions<#= TList(i, "<", ">") #>.Assertion(assertion, description));
        }

        /// <summary>
        /// Adds the first assertion for the test if the test action is expected to throw an exception.
        /// </summary>
        /// <param name="assertion">The assertion.</param>
        /// <returns>A builder for providing additional assertions for the test.</returns>
        public TestBuilderWithActionAndExAssertions<#= TList(i, "<", ">") #> ThenThrows(Expression<Action<<#= TList(i, "", ", ") #>Exception>> assertion)
        {
            return new TestBuilderWithActionAndExAssertions<#= TList(i, "<", ">") #>(
<# WriteLineIf(i > 0, "arrange,", 4); #>
                testAction,
                new TestBuilderWithActionAndExAssertions<#= TList(i, "<", ">") #>.Assertion(assertion));
        }

        /// <summary>
        /// Adds the first assertion for the test if the test action is expected to throw an exception.
        /// </summary>
        /// <param name="assertion">The assertion.</param>
        /// <param name="description">The description of the assertion.</param>
        /// <returns>A builder for providing additional assertions for the test.</returns>
        public TestBuilderWithActionAndExAssertions<#= TList(i, "<", ">") #> ThenThrows(
            Action<<#= TList(i, "", ", ") #>Exception> assertion,
            string description)
        {
            return new TestBuilderWithActionAndExAssertions<#= TList(i, "<", ">") #>(
<# WriteLineIf(i > 0, "arrange,", 4); #>
                testAction,
                new TestBuilderWithActionAndExAssertions<#= TList(i, "<", ">") #>.Assertion(assertion, description));
        }
    }
<# } #>
}