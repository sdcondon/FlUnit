<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #><#+

const int MaxPrerequisiteCount = 5;
const int IndentSize = 4;

string TypeParamDocs(int i, Func<int, string> desc)
{
    var lines = Enumerable.Range(1, i).Select(i => $"/// <typeparam name=\"T{i}\">{desc(i)}</typeparam>");
    return string.Join(Environment.NewLine + "    ", lines);
}

void WriteTypeParamDocs(int count, Func<int, string> desc, int indent = 1)
{
    for (int i = 1; i <= count; i++)
    {
        Write(new String(' ', IndentSize * indent));
        WriteLine($"/// <typeparam name=\"T{i}\">{desc(i)}</typeparam>");
    }
}

IEnumerable<string> TypeParamNames(int i) => Enumerable.Range(1, i).Select(i => $"T{i}");

string ArrangeFieldType(int i) => i == 1 ? "Func<ITestContext, ValueTask<IEnumerable<T1>>>" : $"({string.Join(", ", TypeParamNames(i).Select(t => $"Func<ITestContext, ValueTask<IEnumerable<{t}>>>"))})";

string PrereqsFieldType(int i) => i == 1 ? "T1" : $"({string.Join(", ", TypeParamNames(i).Select(t => $"{t}"))})";

string List(
    int count,
    Func<int, string> itemValue,
    string nonZeroPrefix = "",
    string nonZeroSuffix = "")
{
    var prefix = count > 0 ? nonZeroPrefix : "";
    var suffix = count > 0 ? nonZeroSuffix : "";
    return $"{prefix}{string.Join(", ", Enumerable.Range(1, count).Select(itemValue))}{suffix}";
}

string TList(
    int count,
    string nonZeroPrefix = "",
    string nonZeroSuffix = "")
{
    return List(count, i => $"T{i}", nonZeroPrefix, nonZeroSuffix);
}

void WriteLineIf(bool predicate, string line = "", int indent = 0)
{
    if (predicate)
    {
        Write(new String(' ', IndentSize * indent));
        WriteLine(line);
    }
}

void WriteIf(bool predicate, string write, int indent = 0)
{
    if (predicate)
    {
        Write(new String(' ', IndentSize * indent));
        Write(write);
    }
}

string Ordinal(int i)
{
    if ((i / 10) % 10 == 1)
    {
        return $"{i}th";
    }
    else return (i % 10) switch 
    {
        1 => $"{i}st",
        2 => $"{i}nd",
        3 => $"{i}rd",
        _ => $"{i}th"
    };
}

string Plural(int i) => i == 1 ? string.Empty : "s";

#>